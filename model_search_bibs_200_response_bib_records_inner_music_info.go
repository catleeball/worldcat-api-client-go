/*
WorldCat Search API v. 2

Searching of WorldCat

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SearchBibs200ResponseBibRecordsInnerMusicInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchBibs200ResponseBibRecordsInnerMusicInfo{}

// SearchBibs200ResponseBibRecordsInnerMusicInfo struct for SearchBibs200ResponseBibRecordsInnerMusicInfo
type SearchBibs200ResponseBibRecordsInnerMusicInfo struct {
	Instrumentations []SearchBibs200ResponseBibRecordsInnerMusicInfoInstrumentationsInner `json:"instrumentations,omitempty"`
	// Musical Key [v384sa]
	MusicalKey *string `json:"musicalKey,omitempty"`
	// Musical Instruments [v048sa,b]
	InstrumentsCodes []string `json:"instrumentsCodes,omitempty"`
	// Numeric Designation of Musical Work [v383sa,b,c]
	NumericDesignation *string `json:"numericDesignation,omitempty"`
	// Musical Presentation Statement [v254sa]
	MusicalPresentationStatement *string `json:"musicalPresentationStatement,omitempty"`
}

// NewSearchBibs200ResponseBibRecordsInnerMusicInfo instantiates a new SearchBibs200ResponseBibRecordsInnerMusicInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchBibs200ResponseBibRecordsInnerMusicInfo() *SearchBibs200ResponseBibRecordsInnerMusicInfo {
	this := SearchBibs200ResponseBibRecordsInnerMusicInfo{}
	return &this
}

// NewSearchBibs200ResponseBibRecordsInnerMusicInfoWithDefaults instantiates a new SearchBibs200ResponseBibRecordsInnerMusicInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchBibs200ResponseBibRecordsInnerMusicInfoWithDefaults() *SearchBibs200ResponseBibRecordsInnerMusicInfo {
	this := SearchBibs200ResponseBibRecordsInnerMusicInfo{}
	return &this
}

// GetInstrumentations returns the Instrumentations field value if set, zero value otherwise.
func (o *SearchBibs200ResponseBibRecordsInnerMusicInfo) GetInstrumentations() []SearchBibs200ResponseBibRecordsInnerMusicInfoInstrumentationsInner {
	if o == nil || IsNil(o.Instrumentations) {
		var ret []SearchBibs200ResponseBibRecordsInnerMusicInfoInstrumentationsInner
		return ret
	}
	return o.Instrumentations
}

// GetInstrumentationsOk returns a tuple with the Instrumentations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBibs200ResponseBibRecordsInnerMusicInfo) GetInstrumentationsOk() ([]SearchBibs200ResponseBibRecordsInnerMusicInfoInstrumentationsInner, bool) {
	if o == nil || IsNil(o.Instrumentations) {
		return nil, false
	}
	return o.Instrumentations, true
}

// HasInstrumentations returns a boolean if a field has been set.
func (o *SearchBibs200ResponseBibRecordsInnerMusicInfo) HasInstrumentations() bool {
	if o != nil && !IsNil(o.Instrumentations) {
		return true
	}

	return false
}

// SetInstrumentations gets a reference to the given []SearchBibs200ResponseBibRecordsInnerMusicInfoInstrumentationsInner and assigns it to the Instrumentations field.
func (o *SearchBibs200ResponseBibRecordsInnerMusicInfo) SetInstrumentations(v []SearchBibs200ResponseBibRecordsInnerMusicInfoInstrumentationsInner) {
	o.Instrumentations = v
}

// GetMusicalKey returns the MusicalKey field value if set, zero value otherwise.
func (o *SearchBibs200ResponseBibRecordsInnerMusicInfo) GetMusicalKey() string {
	if o == nil || IsNil(o.MusicalKey) {
		var ret string
		return ret
	}
	return *o.MusicalKey
}

// GetMusicalKeyOk returns a tuple with the MusicalKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBibs200ResponseBibRecordsInnerMusicInfo) GetMusicalKeyOk() (*string, bool) {
	if o == nil || IsNil(o.MusicalKey) {
		return nil, false
	}
	return o.MusicalKey, true
}

// HasMusicalKey returns a boolean if a field has been set.
func (o *SearchBibs200ResponseBibRecordsInnerMusicInfo) HasMusicalKey() bool {
	if o != nil && !IsNil(o.MusicalKey) {
		return true
	}

	return false
}

// SetMusicalKey gets a reference to the given string and assigns it to the MusicalKey field.
func (o *SearchBibs200ResponseBibRecordsInnerMusicInfo) SetMusicalKey(v string) {
	o.MusicalKey = &v
}

// GetInstrumentsCodes returns the InstrumentsCodes field value if set, zero value otherwise.
func (o *SearchBibs200ResponseBibRecordsInnerMusicInfo) GetInstrumentsCodes() []string {
	if o == nil || IsNil(o.InstrumentsCodes) {
		var ret []string
		return ret
	}
	return o.InstrumentsCodes
}

// GetInstrumentsCodesOk returns a tuple with the InstrumentsCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBibs200ResponseBibRecordsInnerMusicInfo) GetInstrumentsCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.InstrumentsCodes) {
		return nil, false
	}
	return o.InstrumentsCodes, true
}

// HasInstrumentsCodes returns a boolean if a field has been set.
func (o *SearchBibs200ResponseBibRecordsInnerMusicInfo) HasInstrumentsCodes() bool {
	if o != nil && !IsNil(o.InstrumentsCodes) {
		return true
	}

	return false
}

// SetInstrumentsCodes gets a reference to the given []string and assigns it to the InstrumentsCodes field.
func (o *SearchBibs200ResponseBibRecordsInnerMusicInfo) SetInstrumentsCodes(v []string) {
	o.InstrumentsCodes = v
}

// GetNumericDesignation returns the NumericDesignation field value if set, zero value otherwise.
func (o *SearchBibs200ResponseBibRecordsInnerMusicInfo) GetNumericDesignation() string {
	if o == nil || IsNil(o.NumericDesignation) {
		var ret string
		return ret
	}
	return *o.NumericDesignation
}

// GetNumericDesignationOk returns a tuple with the NumericDesignation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBibs200ResponseBibRecordsInnerMusicInfo) GetNumericDesignationOk() (*string, bool) {
	if o == nil || IsNil(o.NumericDesignation) {
		return nil, false
	}
	return o.NumericDesignation, true
}

// HasNumericDesignation returns a boolean if a field has been set.
func (o *SearchBibs200ResponseBibRecordsInnerMusicInfo) HasNumericDesignation() bool {
	if o != nil && !IsNil(o.NumericDesignation) {
		return true
	}

	return false
}

// SetNumericDesignation gets a reference to the given string and assigns it to the NumericDesignation field.
func (o *SearchBibs200ResponseBibRecordsInnerMusicInfo) SetNumericDesignation(v string) {
	o.NumericDesignation = &v
}

// GetMusicalPresentationStatement returns the MusicalPresentationStatement field value if set, zero value otherwise.
func (o *SearchBibs200ResponseBibRecordsInnerMusicInfo) GetMusicalPresentationStatement() string {
	if o == nil || IsNil(o.MusicalPresentationStatement) {
		var ret string
		return ret
	}
	return *o.MusicalPresentationStatement
}

// GetMusicalPresentationStatementOk returns a tuple with the MusicalPresentationStatement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBibs200ResponseBibRecordsInnerMusicInfo) GetMusicalPresentationStatementOk() (*string, bool) {
	if o == nil || IsNil(o.MusicalPresentationStatement) {
		return nil, false
	}
	return o.MusicalPresentationStatement, true
}

// HasMusicalPresentationStatement returns a boolean if a field has been set.
func (o *SearchBibs200ResponseBibRecordsInnerMusicInfo) HasMusicalPresentationStatement() bool {
	if o != nil && !IsNil(o.MusicalPresentationStatement) {
		return true
	}

	return false
}

// SetMusicalPresentationStatement gets a reference to the given string and assigns it to the MusicalPresentationStatement field.
func (o *SearchBibs200ResponseBibRecordsInnerMusicInfo) SetMusicalPresentationStatement(v string) {
	o.MusicalPresentationStatement = &v
}

func (o SearchBibs200ResponseBibRecordsInnerMusicInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchBibs200ResponseBibRecordsInnerMusicInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Instrumentations) {
		toSerialize["instrumentations"] = o.Instrumentations
	}
	if !IsNil(o.MusicalKey) {
		toSerialize["musicalKey"] = o.MusicalKey
	}
	if !IsNil(o.InstrumentsCodes) {
		toSerialize["instrumentsCodes"] = o.InstrumentsCodes
	}
	if !IsNil(o.NumericDesignation) {
		toSerialize["numericDesignation"] = o.NumericDesignation
	}
	if !IsNil(o.MusicalPresentationStatement) {
		toSerialize["musicalPresentationStatement"] = o.MusicalPresentationStatement
	}
	return toSerialize, nil
}

type NullableSearchBibs200ResponseBibRecordsInnerMusicInfo struct {
	value *SearchBibs200ResponseBibRecordsInnerMusicInfo
	isSet bool
}

func (v NullableSearchBibs200ResponseBibRecordsInnerMusicInfo) Get() *SearchBibs200ResponseBibRecordsInnerMusicInfo {
	return v.value
}

func (v *NullableSearchBibs200ResponseBibRecordsInnerMusicInfo) Set(val *SearchBibs200ResponseBibRecordsInnerMusicInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchBibs200ResponseBibRecordsInnerMusicInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchBibs200ResponseBibRecordsInnerMusicInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchBibs200ResponseBibRecordsInnerMusicInfo(val *SearchBibs200ResponseBibRecordsInnerMusicInfo) *NullableSearchBibs200ResponseBibRecordsInnerMusicInfo {
	return &NullableSearchBibs200ResponseBibRecordsInnerMusicInfo{value: val, isSet: true}
}

func (v NullableSearchBibs200ResponseBibRecordsInnerMusicInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchBibs200ResponseBibRecordsInnerMusicInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
