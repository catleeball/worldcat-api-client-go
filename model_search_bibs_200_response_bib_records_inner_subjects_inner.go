/*
WorldCat Search API v. 2

Searching of WorldCat

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SearchBibs200ResponseBibRecordsInnerSubjectsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchBibs200ResponseBibRecordsInnerSubjectsInner{}

// SearchBibs200ResponseBibRecordsInnerSubjectsInner Subjects [v600sa,b,c,d,n,v,x,y,z,e,j,4 v610sa,b,n,v,x,y,z,e,j,4 v611sa,c,d,n,v,x,y,z,e,j,4 v630sa,d,e,f,k,l,m,n,o,d,p,r,s,v,x,y,z,e,j,4 v650sa,b,x,y,z,v,e,j,4 v651sa,x,y,z,v,e,j,4 v655sa,b,c,v,x,y,z,e,j,4 v648sa,v,w,x,y,z,e,j,4 v653sa,e,j,4 v656sa,k,v,x,y,z,3,e,j,4 v657sa,v,x,y,z,3,e,j,4 (v690,v691,v695,v696,v697,v698,v699 sa,b,c,d,e,f,k,l,m,n,o,p,r,s,v,x,y,z,e,j,4)]
type SearchBibs200ResponseBibRecordsInnerSubjectsInner struct {
	SubjectName *SearchBibs200ResponseBibRecordsInnerTitleMainTitlesInner `json:"subjectName,omitempty"`
	// subject authority vocabularies (MESH, FAST, LCSH, RVM)
	Vocabulary  *string                                                                       `json:"vocabulary,omitempty"`
	Relators    []SearchBibs200ResponseBibRecordsInnerTitleAdditionalTitlesInnerRelatorsInner `json:"relators,omitempty"`
	SubjectType *string                                                                       `json:"subjectType,omitempty"`
	// URI [6xx s1]
	Uri *string `json:"uri,omitempty"`
}

// NewSearchBibs200ResponseBibRecordsInnerSubjectsInner instantiates a new SearchBibs200ResponseBibRecordsInnerSubjectsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchBibs200ResponseBibRecordsInnerSubjectsInner() *SearchBibs200ResponseBibRecordsInnerSubjectsInner {
	this := SearchBibs200ResponseBibRecordsInnerSubjectsInner{}
	return &this
}

// NewSearchBibs200ResponseBibRecordsInnerSubjectsInnerWithDefaults instantiates a new SearchBibs200ResponseBibRecordsInnerSubjectsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchBibs200ResponseBibRecordsInnerSubjectsInnerWithDefaults() *SearchBibs200ResponseBibRecordsInnerSubjectsInner {
	this := SearchBibs200ResponseBibRecordsInnerSubjectsInner{}
	return &this
}

// GetSubjectName returns the SubjectName field value if set, zero value otherwise.
func (o *SearchBibs200ResponseBibRecordsInnerSubjectsInner) GetSubjectName() SearchBibs200ResponseBibRecordsInnerTitleMainTitlesInner {
	if o == nil || IsNil(o.SubjectName) {
		var ret SearchBibs200ResponseBibRecordsInnerTitleMainTitlesInner
		return ret
	}
	return *o.SubjectName
}

// GetSubjectNameOk returns a tuple with the SubjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBibs200ResponseBibRecordsInnerSubjectsInner) GetSubjectNameOk() (*SearchBibs200ResponseBibRecordsInnerTitleMainTitlesInner, bool) {
	if o == nil || IsNil(o.SubjectName) {
		return nil, false
	}
	return o.SubjectName, true
}

// HasSubjectName returns a boolean if a field has been set.
func (o *SearchBibs200ResponseBibRecordsInnerSubjectsInner) HasSubjectName() bool {
	if o != nil && !IsNil(o.SubjectName) {
		return true
	}

	return false
}

// SetSubjectName gets a reference to the given SearchBibs200ResponseBibRecordsInnerTitleMainTitlesInner and assigns it to the SubjectName field.
func (o *SearchBibs200ResponseBibRecordsInnerSubjectsInner) SetSubjectName(v SearchBibs200ResponseBibRecordsInnerTitleMainTitlesInner) {
	o.SubjectName = &v
}

// GetVocabulary returns the Vocabulary field value if set, zero value otherwise.
func (o *SearchBibs200ResponseBibRecordsInnerSubjectsInner) GetVocabulary() string {
	if o == nil || IsNil(o.Vocabulary) {
		var ret string
		return ret
	}
	return *o.Vocabulary
}

// GetVocabularyOk returns a tuple with the Vocabulary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBibs200ResponseBibRecordsInnerSubjectsInner) GetVocabularyOk() (*string, bool) {
	if o == nil || IsNil(o.Vocabulary) {
		return nil, false
	}
	return o.Vocabulary, true
}

// HasVocabulary returns a boolean if a field has been set.
func (o *SearchBibs200ResponseBibRecordsInnerSubjectsInner) HasVocabulary() bool {
	if o != nil && !IsNil(o.Vocabulary) {
		return true
	}

	return false
}

// SetVocabulary gets a reference to the given string and assigns it to the Vocabulary field.
func (o *SearchBibs200ResponseBibRecordsInnerSubjectsInner) SetVocabulary(v string) {
	o.Vocabulary = &v
}

// GetRelators returns the Relators field value if set, zero value otherwise.
func (o *SearchBibs200ResponseBibRecordsInnerSubjectsInner) GetRelators() []SearchBibs200ResponseBibRecordsInnerTitleAdditionalTitlesInnerRelatorsInner {
	if o == nil || IsNil(o.Relators) {
		var ret []SearchBibs200ResponseBibRecordsInnerTitleAdditionalTitlesInnerRelatorsInner
		return ret
	}
	return o.Relators
}

// GetRelatorsOk returns a tuple with the Relators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBibs200ResponseBibRecordsInnerSubjectsInner) GetRelatorsOk() ([]SearchBibs200ResponseBibRecordsInnerTitleAdditionalTitlesInnerRelatorsInner, bool) {
	if o == nil || IsNil(o.Relators) {
		return nil, false
	}
	return o.Relators, true
}

// HasRelators returns a boolean if a field has been set.
func (o *SearchBibs200ResponseBibRecordsInnerSubjectsInner) HasRelators() bool {
	if o != nil && !IsNil(o.Relators) {
		return true
	}

	return false
}

// SetRelators gets a reference to the given []SearchBibs200ResponseBibRecordsInnerTitleAdditionalTitlesInnerRelatorsInner and assigns it to the Relators field.
func (o *SearchBibs200ResponseBibRecordsInnerSubjectsInner) SetRelators(v []SearchBibs200ResponseBibRecordsInnerTitleAdditionalTitlesInnerRelatorsInner) {
	o.Relators = v
}

// GetSubjectType returns the SubjectType field value if set, zero value otherwise.
func (o *SearchBibs200ResponseBibRecordsInnerSubjectsInner) GetSubjectType() string {
	if o == nil || IsNil(o.SubjectType) {
		var ret string
		return ret
	}
	return *o.SubjectType
}

// GetSubjectTypeOk returns a tuple with the SubjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBibs200ResponseBibRecordsInnerSubjectsInner) GetSubjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectType) {
		return nil, false
	}
	return o.SubjectType, true
}

// HasSubjectType returns a boolean if a field has been set.
func (o *SearchBibs200ResponseBibRecordsInnerSubjectsInner) HasSubjectType() bool {
	if o != nil && !IsNil(o.SubjectType) {
		return true
	}

	return false
}

// SetSubjectType gets a reference to the given string and assigns it to the SubjectType field.
func (o *SearchBibs200ResponseBibRecordsInnerSubjectsInner) SetSubjectType(v string) {
	o.SubjectType = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *SearchBibs200ResponseBibRecordsInnerSubjectsInner) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBibs200ResponseBibRecordsInnerSubjectsInner) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *SearchBibs200ResponseBibRecordsInnerSubjectsInner) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *SearchBibs200ResponseBibRecordsInnerSubjectsInner) SetUri(v string) {
	o.Uri = &v
}

func (o SearchBibs200ResponseBibRecordsInnerSubjectsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchBibs200ResponseBibRecordsInnerSubjectsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SubjectName) {
		toSerialize["subjectName"] = o.SubjectName
	}
	if !IsNil(o.Vocabulary) {
		toSerialize["vocabulary"] = o.Vocabulary
	}
	if !IsNil(o.Relators) {
		toSerialize["relators"] = o.Relators
	}
	if !IsNil(o.SubjectType) {
		toSerialize["subjectType"] = o.SubjectType
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	return toSerialize, nil
}

type NullableSearchBibs200ResponseBibRecordsInnerSubjectsInner struct {
	value *SearchBibs200ResponseBibRecordsInnerSubjectsInner
	isSet bool
}

func (v NullableSearchBibs200ResponseBibRecordsInnerSubjectsInner) Get() *SearchBibs200ResponseBibRecordsInnerSubjectsInner {
	return v.value
}

func (v *NullableSearchBibs200ResponseBibRecordsInnerSubjectsInner) Set(val *SearchBibs200ResponseBibRecordsInnerSubjectsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchBibs200ResponseBibRecordsInnerSubjectsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchBibs200ResponseBibRecordsInnerSubjectsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchBibs200ResponseBibRecordsInnerSubjectsInner(val *SearchBibs200ResponseBibRecordsInnerSubjectsInner) *NullableSearchBibs200ResponseBibRecordsInnerSubjectsInner {
	return &NullableSearchBibs200ResponseBibRecordsInnerSubjectsInner{value: val, isSet: true}
}

func (v NullableSearchBibs200ResponseBibRecordsInnerSubjectsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchBibs200ResponseBibRecordsInnerSubjectsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
