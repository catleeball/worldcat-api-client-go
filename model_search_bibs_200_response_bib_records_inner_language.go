/*
WorldCat Search API v. 2

Searching of WorldCat

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SearchBibs200ResponseBibRecordsInnerLanguage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchBibs200ResponseBibRecordsInnerLanguage{}

// SearchBibs200ResponseBibRecordsInnerLanguage struct for SearchBibs200ResponseBibRecordsInnerLanguage
type SearchBibs200ResponseBibRecordsInnerLanguage struct {
	// Language of the item [v041sa,j]
	ItemLanguage *string `json:"itemLanguage,omitempty"`
	// Language record was cataloged in [v040sb]
	CatalogingLanguage *string `json:"catalogingLanguage,omitempty"`
}

// NewSearchBibs200ResponseBibRecordsInnerLanguage instantiates a new SearchBibs200ResponseBibRecordsInnerLanguage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchBibs200ResponseBibRecordsInnerLanguage() *SearchBibs200ResponseBibRecordsInnerLanguage {
	this := SearchBibs200ResponseBibRecordsInnerLanguage{}
	return &this
}

// NewSearchBibs200ResponseBibRecordsInnerLanguageWithDefaults instantiates a new SearchBibs200ResponseBibRecordsInnerLanguage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchBibs200ResponseBibRecordsInnerLanguageWithDefaults() *SearchBibs200ResponseBibRecordsInnerLanguage {
	this := SearchBibs200ResponseBibRecordsInnerLanguage{}
	return &this
}

// GetItemLanguage returns the ItemLanguage field value if set, zero value otherwise.
func (o *SearchBibs200ResponseBibRecordsInnerLanguage) GetItemLanguage() string {
	if o == nil || IsNil(o.ItemLanguage) {
		var ret string
		return ret
	}
	return *o.ItemLanguage
}

// GetItemLanguageOk returns a tuple with the ItemLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBibs200ResponseBibRecordsInnerLanguage) GetItemLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.ItemLanguage) {
		return nil, false
	}
	return o.ItemLanguage, true
}

// HasItemLanguage returns a boolean if a field has been set.
func (o *SearchBibs200ResponseBibRecordsInnerLanguage) HasItemLanguage() bool {
	if o != nil && !IsNil(o.ItemLanguage) {
		return true
	}

	return false
}

// SetItemLanguage gets a reference to the given string and assigns it to the ItemLanguage field.
func (o *SearchBibs200ResponseBibRecordsInnerLanguage) SetItemLanguage(v string) {
	o.ItemLanguage = &v
}

// GetCatalogingLanguage returns the CatalogingLanguage field value if set, zero value otherwise.
func (o *SearchBibs200ResponseBibRecordsInnerLanguage) GetCatalogingLanguage() string {
	if o == nil || IsNil(o.CatalogingLanguage) {
		var ret string
		return ret
	}
	return *o.CatalogingLanguage
}

// GetCatalogingLanguageOk returns a tuple with the CatalogingLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBibs200ResponseBibRecordsInnerLanguage) GetCatalogingLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.CatalogingLanguage) {
		return nil, false
	}
	return o.CatalogingLanguage, true
}

// HasCatalogingLanguage returns a boolean if a field has been set.
func (o *SearchBibs200ResponseBibRecordsInnerLanguage) HasCatalogingLanguage() bool {
	if o != nil && !IsNil(o.CatalogingLanguage) {
		return true
	}

	return false
}

// SetCatalogingLanguage gets a reference to the given string and assigns it to the CatalogingLanguage field.
func (o *SearchBibs200ResponseBibRecordsInnerLanguage) SetCatalogingLanguage(v string) {
	o.CatalogingLanguage = &v
}

func (o SearchBibs200ResponseBibRecordsInnerLanguage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchBibs200ResponseBibRecordsInnerLanguage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ItemLanguage) {
		toSerialize["itemLanguage"] = o.ItemLanguage
	}
	if !IsNil(o.CatalogingLanguage) {
		toSerialize["catalogingLanguage"] = o.CatalogingLanguage
	}
	return toSerialize, nil
}

type NullableSearchBibs200ResponseBibRecordsInnerLanguage struct {
	value *SearchBibs200ResponseBibRecordsInnerLanguage
	isSet bool
}

func (v NullableSearchBibs200ResponseBibRecordsInnerLanguage) Get() *SearchBibs200ResponseBibRecordsInnerLanguage {
	return v.value
}

func (v *NullableSearchBibs200ResponseBibRecordsInnerLanguage) Set(val *SearchBibs200ResponseBibRecordsInnerLanguage) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchBibs200ResponseBibRecordsInnerLanguage) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchBibs200ResponseBibRecordsInnerLanguage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchBibs200ResponseBibRecordsInnerLanguage(val *SearchBibs200ResponseBibRecordsInnerLanguage) *NullableSearchBibs200ResponseBibRecordsInnerLanguage {
	return &NullableSearchBibs200ResponseBibRecordsInnerLanguage{value: val, isSet: true}
}

func (v NullableSearchBibs200ResponseBibRecordsInnerLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchBibs200ResponseBibRecordsInnerLanguage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
