/*
WorldCat Search API v. 2

Searching of WorldCat

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SearchBibs200ResponseBibRecordsInnerDate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchBibs200ResponseBibRecordsInnerDate{}

// SearchBibs200ResponseBibRecordsInnerDate struct for SearchBibs200ResponseBibRecordsInnerDate
type SearchBibs200ResponseBibRecordsInnerDate struct {
	// Date of Publication [v260sc || c008(bytes 07-14) || v264sc || v362sa]
	PublicationDate *string `json:"publicationDate,omitempty"`
	// Chronological issue designations [v362sa]
	PublicationSequentialDesignationDate *string `json:"publicationSequentialDesignationDate,omitempty"`
	// Frequency of Publication [v310sa]
	CurrentPublicationFrequency *string `json:"currentPublicationFrequency,omitempty"`
	// Date Record was Created [Admin/CreateDate]
	CreateDate *string `json:"createDate,omitempty"`
	// Date Record was last Updated [Admin/ReplacedDate]
	ReplaceDate *string `json:"replaceDate,omitempty"`
}

// NewSearchBibs200ResponseBibRecordsInnerDate instantiates a new SearchBibs200ResponseBibRecordsInnerDate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchBibs200ResponseBibRecordsInnerDate() *SearchBibs200ResponseBibRecordsInnerDate {
	this := SearchBibs200ResponseBibRecordsInnerDate{}
	return &this
}

// NewSearchBibs200ResponseBibRecordsInnerDateWithDefaults instantiates a new SearchBibs200ResponseBibRecordsInnerDate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchBibs200ResponseBibRecordsInnerDateWithDefaults() *SearchBibs200ResponseBibRecordsInnerDate {
	this := SearchBibs200ResponseBibRecordsInnerDate{}
	return &this
}

// GetPublicationDate returns the PublicationDate field value if set, zero value otherwise.
func (o *SearchBibs200ResponseBibRecordsInnerDate) GetPublicationDate() string {
	if o == nil || IsNil(o.PublicationDate) {
		var ret string
		return ret
	}
	return *o.PublicationDate
}

// GetPublicationDateOk returns a tuple with the PublicationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBibs200ResponseBibRecordsInnerDate) GetPublicationDateOk() (*string, bool) {
	if o == nil || IsNil(o.PublicationDate) {
		return nil, false
	}
	return o.PublicationDate, true
}

// HasPublicationDate returns a boolean if a field has been set.
func (o *SearchBibs200ResponseBibRecordsInnerDate) HasPublicationDate() bool {
	if o != nil && !IsNil(o.PublicationDate) {
		return true
	}

	return false
}

// SetPublicationDate gets a reference to the given string and assigns it to the PublicationDate field.
func (o *SearchBibs200ResponseBibRecordsInnerDate) SetPublicationDate(v string) {
	o.PublicationDate = &v
}

// GetPublicationSequentialDesignationDate returns the PublicationSequentialDesignationDate field value if set, zero value otherwise.
func (o *SearchBibs200ResponseBibRecordsInnerDate) GetPublicationSequentialDesignationDate() string {
	if o == nil || IsNil(o.PublicationSequentialDesignationDate) {
		var ret string
		return ret
	}
	return *o.PublicationSequentialDesignationDate
}

// GetPublicationSequentialDesignationDateOk returns a tuple with the PublicationSequentialDesignationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBibs200ResponseBibRecordsInnerDate) GetPublicationSequentialDesignationDateOk() (*string, bool) {
	if o == nil || IsNil(o.PublicationSequentialDesignationDate) {
		return nil, false
	}
	return o.PublicationSequentialDesignationDate, true
}

// HasPublicationSequentialDesignationDate returns a boolean if a field has been set.
func (o *SearchBibs200ResponseBibRecordsInnerDate) HasPublicationSequentialDesignationDate() bool {
	if o != nil && !IsNil(o.PublicationSequentialDesignationDate) {
		return true
	}

	return false
}

// SetPublicationSequentialDesignationDate gets a reference to the given string and assigns it to the PublicationSequentialDesignationDate field.
func (o *SearchBibs200ResponseBibRecordsInnerDate) SetPublicationSequentialDesignationDate(v string) {
	o.PublicationSequentialDesignationDate = &v
}

// GetCurrentPublicationFrequency returns the CurrentPublicationFrequency field value if set, zero value otherwise.
func (o *SearchBibs200ResponseBibRecordsInnerDate) GetCurrentPublicationFrequency() string {
	if o == nil || IsNil(o.CurrentPublicationFrequency) {
		var ret string
		return ret
	}
	return *o.CurrentPublicationFrequency
}

// GetCurrentPublicationFrequencyOk returns a tuple with the CurrentPublicationFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBibs200ResponseBibRecordsInnerDate) GetCurrentPublicationFrequencyOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentPublicationFrequency) {
		return nil, false
	}
	return o.CurrentPublicationFrequency, true
}

// HasCurrentPublicationFrequency returns a boolean if a field has been set.
func (o *SearchBibs200ResponseBibRecordsInnerDate) HasCurrentPublicationFrequency() bool {
	if o != nil && !IsNil(o.CurrentPublicationFrequency) {
		return true
	}

	return false
}

// SetCurrentPublicationFrequency gets a reference to the given string and assigns it to the CurrentPublicationFrequency field.
func (o *SearchBibs200ResponseBibRecordsInnerDate) SetCurrentPublicationFrequency(v string) {
	o.CurrentPublicationFrequency = &v
}

// GetCreateDate returns the CreateDate field value if set, zero value otherwise.
func (o *SearchBibs200ResponseBibRecordsInnerDate) GetCreateDate() string {
	if o == nil || IsNil(o.CreateDate) {
		var ret string
		return ret
	}
	return *o.CreateDate
}

// GetCreateDateOk returns a tuple with the CreateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBibs200ResponseBibRecordsInnerDate) GetCreateDateOk() (*string, bool) {
	if o == nil || IsNil(o.CreateDate) {
		return nil, false
	}
	return o.CreateDate, true
}

// HasCreateDate returns a boolean if a field has been set.
func (o *SearchBibs200ResponseBibRecordsInnerDate) HasCreateDate() bool {
	if o != nil && !IsNil(o.CreateDate) {
		return true
	}

	return false
}

// SetCreateDate gets a reference to the given string and assigns it to the CreateDate field.
func (o *SearchBibs200ResponseBibRecordsInnerDate) SetCreateDate(v string) {
	o.CreateDate = &v
}

// GetReplaceDate returns the ReplaceDate field value if set, zero value otherwise.
func (o *SearchBibs200ResponseBibRecordsInnerDate) GetReplaceDate() string {
	if o == nil || IsNil(o.ReplaceDate) {
		var ret string
		return ret
	}
	return *o.ReplaceDate
}

// GetReplaceDateOk returns a tuple with the ReplaceDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBibs200ResponseBibRecordsInnerDate) GetReplaceDateOk() (*string, bool) {
	if o == nil || IsNil(o.ReplaceDate) {
		return nil, false
	}
	return o.ReplaceDate, true
}

// HasReplaceDate returns a boolean if a field has been set.
func (o *SearchBibs200ResponseBibRecordsInnerDate) HasReplaceDate() bool {
	if o != nil && !IsNil(o.ReplaceDate) {
		return true
	}

	return false
}

// SetReplaceDate gets a reference to the given string and assigns it to the ReplaceDate field.
func (o *SearchBibs200ResponseBibRecordsInnerDate) SetReplaceDate(v string) {
	o.ReplaceDate = &v
}

func (o SearchBibs200ResponseBibRecordsInnerDate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchBibs200ResponseBibRecordsInnerDate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PublicationDate) {
		toSerialize["publicationDate"] = o.PublicationDate
	}
	if !IsNil(o.PublicationSequentialDesignationDate) {
		toSerialize["publicationSequentialDesignationDate"] = o.PublicationSequentialDesignationDate
	}
	if !IsNil(o.CurrentPublicationFrequency) {
		toSerialize["currentPublicationFrequency"] = o.CurrentPublicationFrequency
	}
	if !IsNil(o.CreateDate) {
		toSerialize["createDate"] = o.CreateDate
	}
	if !IsNil(o.ReplaceDate) {
		toSerialize["replaceDate"] = o.ReplaceDate
	}
	return toSerialize, nil
}

type NullableSearchBibs200ResponseBibRecordsInnerDate struct {
	value *SearchBibs200ResponseBibRecordsInnerDate
	isSet bool
}

func (v NullableSearchBibs200ResponseBibRecordsInnerDate) Get() *SearchBibs200ResponseBibRecordsInnerDate {
	return v.value
}

func (v *NullableSearchBibs200ResponseBibRecordsInnerDate) Set(val *SearchBibs200ResponseBibRecordsInnerDate) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchBibs200ResponseBibRecordsInnerDate) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchBibs200ResponseBibRecordsInnerDate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchBibs200ResponseBibRecordsInnerDate(val *SearchBibs200ResponseBibRecordsInnerDate) *NullableSearchBibs200ResponseBibRecordsInnerDate {
	return &NullableSearchBibs200ResponseBibRecordsInnerDate{value: val, isSet: true}
}

func (v NullableSearchBibs200ResponseBibRecordsInnerDate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchBibs200ResponseBibRecordsInnerDate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
