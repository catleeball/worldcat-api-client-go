/*
WorldCat Search API v. 2

Searching of WorldCat

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SearchBibs200ResponseBibRecordsInnerEdition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchBibs200ResponseBibRecordsInnerEdition{}

// SearchBibs200ResponseBibRecordsInnerEdition struct for SearchBibs200ResponseBibRecordsInnerEdition
type SearchBibs200ResponseBibRecordsInnerEdition struct {
	// Edition Statement [v250sa]
	Statement *string `json:"statement,omitempty"`
}

// NewSearchBibs200ResponseBibRecordsInnerEdition instantiates a new SearchBibs200ResponseBibRecordsInnerEdition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchBibs200ResponseBibRecordsInnerEdition() *SearchBibs200ResponseBibRecordsInnerEdition {
	this := SearchBibs200ResponseBibRecordsInnerEdition{}
	return &this
}

// NewSearchBibs200ResponseBibRecordsInnerEditionWithDefaults instantiates a new SearchBibs200ResponseBibRecordsInnerEdition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchBibs200ResponseBibRecordsInnerEditionWithDefaults() *SearchBibs200ResponseBibRecordsInnerEdition {
	this := SearchBibs200ResponseBibRecordsInnerEdition{}
	return &this
}

// GetStatement returns the Statement field value if set, zero value otherwise.
func (o *SearchBibs200ResponseBibRecordsInnerEdition) GetStatement() string {
	if o == nil || IsNil(o.Statement) {
		var ret string
		return ret
	}
	return *o.Statement
}

// GetStatementOk returns a tuple with the Statement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBibs200ResponseBibRecordsInnerEdition) GetStatementOk() (*string, bool) {
	if o == nil || IsNil(o.Statement) {
		return nil, false
	}
	return o.Statement, true
}

// HasStatement returns a boolean if a field has been set.
func (o *SearchBibs200ResponseBibRecordsInnerEdition) HasStatement() bool {
	if o != nil && !IsNil(o.Statement) {
		return true
	}

	return false
}

// SetStatement gets a reference to the given string and assigns it to the Statement field.
func (o *SearchBibs200ResponseBibRecordsInnerEdition) SetStatement(v string) {
	o.Statement = &v
}

func (o SearchBibs200ResponseBibRecordsInnerEdition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchBibs200ResponseBibRecordsInnerEdition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Statement) {
		toSerialize["statement"] = o.Statement
	}
	return toSerialize, nil
}

type NullableSearchBibs200ResponseBibRecordsInnerEdition struct {
	value *SearchBibs200ResponseBibRecordsInnerEdition
	isSet bool
}

func (v NullableSearchBibs200ResponseBibRecordsInnerEdition) Get() *SearchBibs200ResponseBibRecordsInnerEdition {
	return v.value
}

func (v *NullableSearchBibs200ResponseBibRecordsInnerEdition) Set(val *SearchBibs200ResponseBibRecordsInnerEdition) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchBibs200ResponseBibRecordsInnerEdition) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchBibs200ResponseBibRecordsInnerEdition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchBibs200ResponseBibRecordsInnerEdition(val *SearchBibs200ResponseBibRecordsInnerEdition) *NullableSearchBibs200ResponseBibRecordsInnerEdition {
	return &NullableSearchBibs200ResponseBibRecordsInnerEdition{value: val, isSet: true}
}

func (v NullableSearchBibs200ResponseBibRecordsInnerEdition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchBibs200ResponseBibRecordsInnerEdition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
