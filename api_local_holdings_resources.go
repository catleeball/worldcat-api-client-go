/*
WorldCat Search API v. 2

Searching of WorldCat

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// LocalHoldingsResourcesApiService LocalHoldingsResourcesApi service
type LocalHoldingsResourcesApiService service

type ApiRetrieveLhrRequest struct {
	ctx           context.Context
	ApiService    *LocalHoldingsResourcesApiService
	controlNumber string
	accept        *string
}

// Content Type the client supports and is requesting (application/json currently supported)
func (r ApiRetrieveLhrRequest) Accept(accept string) ApiRetrieveLhrRequest {
	r.accept = &accept
	return r
}

func (r ApiRetrieveLhrRequest) Execute() (*FindBibRetainedHoldings200ResponseBriefRecordsInnerInstitutionHoldingOneOfInner1, *http.Response, error) {
	return r.ApiService.RetrieveLhrExecute(r)
}

/*
RetrieveLhr Retrieve LHR Resource

Retrieve LHR Resource

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param controlNumber LHR control number
	@return ApiRetrieveLhrRequest
*/
func (a *LocalHoldingsResourcesApiService) RetrieveLhr(ctx context.Context, controlNumber string) ApiRetrieveLhrRequest {
	return ApiRetrieveLhrRequest{
		ApiService:    a,
		ctx:           ctx,
		controlNumber: controlNumber,
	}
}

// Execute executes the request
//
//	@return FindBibRetainedHoldings200ResponseBriefRecordsInnerInstitutionHoldingOneOfInner1
func (a *LocalHoldingsResourcesApiService) RetrieveLhrExecute(r ApiRetrieveLhrRequest) (*FindBibRetainedHoldings200ResponseBriefRecordsInnerInstitutionHoldingOneOfInner1, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FindBibRetainedHoldings200ResponseBriefRecordsInnerInstitutionHoldingOneOfInner1
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalHoldingsResourcesApiService.RetrieveLhr")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/my-holdings/{controlNumber}"
	localVarPath = strings.Replace(localVarPath, "{"+"control-number"+"}", url.PathEscape(parameterValueToString(r.controlNumber, "controlNumber")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accept != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept", r.accept, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchLhrRequest struct {
	ctx        context.Context
	ApiService *LocalHoldingsResourcesApiService
	accept     *string
	oclcNumber *int64
	barcode    *string
	orderBy    *string
	offset     *int32
	limit      *int32
}

// Content Type the client supports and is requesting (application/json currently supported)
func (r ApiSearchLhrRequest) Accept(accept string) ApiSearchLhrRequest {
	r.accept = &accept
	return r
}

// oclc number of the bibliographic item
func (r ApiSearchLhrRequest) OclcNumber(oclcNumber int64) ApiSearchLhrRequest {
	r.oclcNumber = &oclcNumber
	return r
}

// barcode
func (r ApiSearchLhrRequest) Barcode(barcode string) ApiSearchLhrRequest {
	r.barcode = &barcode
	return r
}

// result sort key
func (r ApiSearchLhrRequest) OrderBy(orderBy string) ApiSearchLhrRequest {
	r.orderBy = &orderBy
	return r
}

// start position of the bib records to return (0 based), default 0
func (r ApiSearchLhrRequest) Offset(offset int32) ApiSearchLhrRequest {
	r.offset = &offset
	return r
}

// maximum number of records to return, maximum 50, default 10
func (r ApiSearchLhrRequest) Limit(limit int32) ApiSearchLhrRequest {
	r.limit = &limit
	return r
}

func (r ApiSearchLhrRequest) Execute() (*SearchLhr200Response, *http.Response, error) {
	return r.ApiService.SearchLhrExecute(r)
}

/*
SearchLhr Search LHR Resources

Search LHR Resources

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSearchLhrRequest
*/
func (a *LocalHoldingsResourcesApiService) SearchLhr(ctx context.Context) ApiSearchLhrRequest {
	return ApiSearchLhrRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SearchLhr200Response
func (a *LocalHoldingsResourcesApiService) SearchLhrExecute(r ApiSearchLhrRequest) (*SearchLhr200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SearchLhr200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalHoldingsResourcesApiService.SearchLhr")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/my-holdings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.oclcNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "oclcNumber", r.oclcNumber, "")
	}
	if r.barcode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "barcode", r.barcode, "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accept != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept", r.accept, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchRetrainedLhrRequest struct {
	ctx                 context.Context
	ApiService          *LocalHoldingsResourcesApiService
	accept              *string
	oclcNumber          *int64
	barcode             *string
	heldBy              *string
	heldBySymbol        *[]string
	heldByInstitutionID *[]int32
	spProgram           *string
	orderBy             *string
	offset              *int32
	limit               *int32
}

// Content Type the client supports and is requesting (application/json currently supported)
func (r ApiSearchRetrainedLhrRequest) Accept(accept string) ApiSearchRetrainedLhrRequest {
	r.accept = &accept
	return r
}

// oclc number of the bibliographic item
func (r ApiSearchRetrainedLhrRequest) OclcNumber(oclcNumber int64) ApiSearchRetrainedLhrRequest {
	r.oclcNumber = &oclcNumber
	return r
}

// barcode
func (r ApiSearchRetrainedLhrRequest) Barcode(barcode string) ApiSearchRetrainedLhrRequest {
	r.barcode = &barcode
	return r
}

// Institution Symbol
// Deprecated
func (r ApiSearchRetrainedLhrRequest) HeldBy(heldBy string) ApiSearchRetrainedLhrRequest {
	r.heldBy = &heldBy
	return r
}

// Institution Symbol
func (r ApiSearchRetrainedLhrRequest) HeldBySymbol(heldBySymbol []string) ApiSearchRetrainedLhrRequest {
	r.heldBySymbol = &heldBySymbol
	return r
}

// Institution registryId
func (r ApiSearchRetrainedLhrRequest) HeldByInstitutionID(heldByInstitutionID []int32) ApiSearchRetrainedLhrRequest {
	r.heldByInstitutionID = &heldByInstitutionID
	return r
}

// Limiter to restrict the response to bibliographic records associated with a particular shared print program (l8 index).
func (r ApiSearchRetrainedLhrRequest) SpProgram(spProgram string) ApiSearchRetrainedLhrRequest {
	r.spProgram = &spProgram
	return r
}

// result sort key
func (r ApiSearchRetrainedLhrRequest) OrderBy(orderBy string) ApiSearchRetrainedLhrRequest {
	r.orderBy = &orderBy
	return r
}

// start position of the bib records to return (0 based), default 0
func (r ApiSearchRetrainedLhrRequest) Offset(offset int32) ApiSearchRetrainedLhrRequest {
	r.offset = &offset
	return r
}

// maximum number of records to return, maximum 50, default 10
func (r ApiSearchRetrainedLhrRequest) Limit(limit int32) ApiSearchRetrainedLhrRequest {
	r.limit = &limit
	return r
}

func (r ApiSearchRetrainedLhrRequest) Execute() (*SearchLhr200Response, *http.Response, error) {
	return r.ApiService.SearchRetrainedLhrExecute(r)
}

/*
SearchRetrainedLhr Search for shared print LHR Resources

Search for shared print LHR Resources

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSearchRetrainedLhrRequest
*/
func (a *LocalHoldingsResourcesApiService) SearchRetrainedLhr(ctx context.Context) ApiSearchRetrainedLhrRequest {
	return ApiSearchRetrainedLhrRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SearchLhr200Response
func (a *LocalHoldingsResourcesApiService) SearchRetrainedLhrExecute(r ApiSearchRetrainedLhrRequest) (*SearchLhr200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SearchLhr200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalHoldingsResourcesApiService.SearchRetrainedLhr")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/retained-holdings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.oclcNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "oclcNumber", r.oclcNumber, "")
	}
	if r.barcode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "barcode", r.barcode, "")
	}
	if r.heldBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "heldBy", r.heldBy, "")
	}
	if r.heldBySymbol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "heldBySymbol", r.heldBySymbol, "csv")
	}
	if r.heldByInstitutionID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "heldByInstitutionID", r.heldByInstitutionID, "csv")
	}
	if r.spProgram != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "spProgram", r.spProgram, "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accept != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept", r.accept, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
