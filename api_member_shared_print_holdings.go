/*
WorldCat Search API v. 2

Searching of WorldCat

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// MemberSharedPrintHoldingsApiService MemberSharedPrintHoldingsApi service
type MemberSharedPrintHoldingsApiService service

type ApiFindBibRetainedHoldingsRequest struct {
	ctx         context.Context
	ApiService  *MemberSharedPrintHoldingsApiService
	accept      *string
	oclcNumber  *int64
	isbn        *string
	issn        *string
	heldByGroup *string
	heldInState *string
	offset      *int32
	limit       *int32
}

// Content Type the client supports and is requesting (application/json currently supported)
func (r ApiFindBibRetainedHoldingsRequest) Accept(accept string) ApiFindBibRetainedHoldingsRequest {
	r.accept = &accept
	return r
}

// oclc number of the bibliographic item
func (r ApiFindBibRetainedHoldingsRequest) OclcNumber(oclcNumber int64) ApiFindBibRetainedHoldingsRequest {
	r.oclcNumber = &oclcNumber
	return r
}

// isbn of the bibliographic item (bn index)
func (r ApiFindBibRetainedHoldingsRequest) Isbn(isbn string) ApiFindBibRetainedHoldingsRequest {
	r.isbn = &isbn
	return r
}

// issn of the bibliographic item (in index)
func (r ApiFindBibRetainedHoldingsRequest) Issn(issn string) ApiFindBibRetainedHoldingsRequest {
	r.issn = &issn
	return r
}

// Restrict to holdings held by Group Symbol
func (r ApiFindBibRetainedHoldingsRequest) HeldByGroup(heldByGroup string) ApiFindBibRetainedHoldingsRequest {
	r.heldByGroup = &heldByGroup
	return r
}

// Restrict to holdings held by Institutions in requested State/Province, per ISO 3166-2.
func (r ApiFindBibRetainedHoldingsRequest) HeldInState(heldInState string) ApiFindBibRetainedHoldingsRequest {
	r.heldInState = &heldInState
	return r
}

// start position of the bib records to return (0 based), default 0
func (r ApiFindBibRetainedHoldingsRequest) Offset(offset int32) ApiFindBibRetainedHoldingsRequest {
	r.offset = &offset
	return r
}

// maximum number of records to return, maximum 50, default 10
func (r ApiFindBibRetainedHoldingsRequest) Limit(limit int32) ApiFindBibRetainedHoldingsRequest {
	r.limit = &limit
	return r
}

func (r ApiFindBibRetainedHoldingsRequest) Execute() (*FindBibRetainedHoldings200Response, *http.Response, error) {
	return r.ApiService.FindBibRetainedHoldingsExecute(r)
}

/*
FindBibRetainedHoldings Find member shared print holdings for a known item

Given a known item, find the member library holdings with a commitment to retain (Shared Print)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFindBibRetainedHoldingsRequest
*/
func (a *MemberSharedPrintHoldingsApiService) FindBibRetainedHoldings(ctx context.Context) ApiFindBibRetainedHoldingsRequest {
	return ApiFindBibRetainedHoldingsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FindBibRetainedHoldings200Response
func (a *MemberSharedPrintHoldingsApiService) FindBibRetainedHoldingsExecute(r ApiFindBibRetainedHoldingsRequest) (*FindBibRetainedHoldings200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FindBibRetainedHoldings200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberSharedPrintHoldingsApiService.FindBibRetainedHoldings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bibs-retained-holdings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.oclcNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "oclcNumber", r.oclcNumber, "")
	}
	if r.isbn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isbn", r.isbn, "")
	}
	if r.issn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "issn", r.issn, "")
	}
	if r.heldByGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "heldByGroup", r.heldByGroup, "")
	}
	if r.heldInState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "heldInState", r.heldInState, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accept != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept", r.accept, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
