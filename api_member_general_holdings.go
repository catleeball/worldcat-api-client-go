/*
WorldCat Search API v. 2

Searching of WorldCat

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// MemberGeneralHoldingsApiService MemberGeneralHoldingsApi service
type MemberGeneralHoldingsApiService service

type ApiFindBibDetailedHoldingsRequest struct {
	ctx                 context.Context
	ApiService          *MemberGeneralHoldingsApiService
	accept              *string
	oclcNumber          *int64
	isbn                *string
	issn                *string
	heldByGroup         *string
	heldBy              *string
	heldBySymbol        *[]string
	heldByInstitutionID *[]int32
	offset              *int32
	limit               *int32
}

// Content Type the client supports and is requesting (application/json currently supported)
func (r ApiFindBibDetailedHoldingsRequest) Accept(accept string) ApiFindBibDetailedHoldingsRequest {
	r.accept = &accept
	return r
}

// oclc number of the bibliographic item
func (r ApiFindBibDetailedHoldingsRequest) OclcNumber(oclcNumber int64) ApiFindBibDetailedHoldingsRequest {
	r.oclcNumber = &oclcNumber
	return r
}

// isbn of the bibliographic item (bn index)
func (r ApiFindBibDetailedHoldingsRequest) Isbn(isbn string) ApiFindBibDetailedHoldingsRequest {
	r.isbn = &isbn
	return r
}

// issn of the bibliographic item (in index)
func (r ApiFindBibDetailedHoldingsRequest) Issn(issn string) ApiFindBibDetailedHoldingsRequest {
	r.issn = &issn
	return r
}

// Restrict to holdings held by Group Symbol
func (r ApiFindBibDetailedHoldingsRequest) HeldByGroup(heldByGroup string) ApiFindBibDetailedHoldingsRequest {
	r.heldByGroup = &heldByGroup
	return r
}

// Institution Symbol
// Deprecated
func (r ApiFindBibDetailedHoldingsRequest) HeldBy(heldBy string) ApiFindBibDetailedHoldingsRequest {
	r.heldBy = &heldBy
	return r
}

// Institution Symbol
func (r ApiFindBibDetailedHoldingsRequest) HeldBySymbol(heldBySymbol []string) ApiFindBibDetailedHoldingsRequest {
	r.heldBySymbol = &heldBySymbol
	return r
}

// Institution registryId
func (r ApiFindBibDetailedHoldingsRequest) HeldByInstitutionID(heldByInstitutionID []int32) ApiFindBibDetailedHoldingsRequest {
	r.heldByInstitutionID = &heldByInstitutionID
	return r
}

// start position of the bib records to return (0 based), default 0
func (r ApiFindBibDetailedHoldingsRequest) Offset(offset int32) ApiFindBibDetailedHoldingsRequest {
	r.offset = &offset
	return r
}

// maximum number of records to return, maximum 50, default 10
func (r ApiFindBibDetailedHoldingsRequest) Limit(limit int32) ApiFindBibDetailedHoldingsRequest {
	r.limit = &limit
	return r
}

func (r ApiFindBibDetailedHoldingsRequest) Execute() (*FindBibRetainedHoldings200Response, *http.Response, error) {
	return r.ApiService.FindBibDetailedHoldingsExecute(r)
}

/*
FindBibDetailedHoldings Find detailed info of member holdings for a known item

Given a known item, search member library holdings for detailed information

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFindBibDetailedHoldingsRequest
*/
func (a *MemberGeneralHoldingsApiService) FindBibDetailedHoldings(ctx context.Context) ApiFindBibDetailedHoldingsRequest {
	return ApiFindBibDetailedHoldingsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FindBibRetainedHoldings200Response
func (a *MemberGeneralHoldingsApiService) FindBibDetailedHoldingsExecute(r ApiFindBibDetailedHoldingsRequest) (*FindBibRetainedHoldings200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FindBibRetainedHoldings200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberGeneralHoldingsApiService.FindBibDetailedHoldings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bibs-detailed-holdings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.oclcNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "oclcNumber", r.oclcNumber, "")
	}
	if r.isbn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isbn", r.isbn, "")
	}
	if r.issn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "issn", r.issn, "")
	}
	if r.heldByGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "heldByGroup", r.heldByGroup, "")
	}
	if r.heldBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "heldBy", r.heldBy, "")
	}
	if r.heldBySymbol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "heldBySymbol", r.heldBySymbol, "csv")
	}
	if r.heldByInstitutionID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "heldByInstitutionID", r.heldByInstitutionID, "csv")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accept != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept", r.accept, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFindBibHoldingsRequest struct {
	ctx                       context.Context
	ApiService                *MemberGeneralHoldingsApiService
	accept                    *string
	oclcNumber                *int64
	isbn                      *string
	issn                      *string
	holdingsAllEditions       *bool
	holdingsAllVariantRecords *bool
	preferredLanguage         *string
	heldInCountry             *string
	heldBySymbol              *[]string
	heldByInstitutionID       *[]int32
	lat                       *float64
	lon                       *float64
	distance                  *int32
	unit                      *string
	numberNearestHoldings     *int32
	offset                    *int32
	limit                     *int32
}

// Content Type the client supports and is requesting (application/json currently supported)
func (r ApiFindBibHoldingsRequest) Accept(accept string) ApiFindBibHoldingsRequest {
	r.accept = &accept
	return r
}

// oclc number of the bibliographic item
func (r ApiFindBibHoldingsRequest) OclcNumber(oclcNumber int64) ApiFindBibHoldingsRequest {
	r.oclcNumber = &oclcNumber
	return r
}

// isbn of the bibliographic item (bn index)
func (r ApiFindBibHoldingsRequest) Isbn(isbn string) ApiFindBibHoldingsRequest {
	r.isbn = &isbn
	return r
}

// issn of the bibliographic item (in index)
func (r ApiFindBibHoldingsRequest) Issn(issn string) ApiFindBibHoldingsRequest {
	r.issn = &issn
	return r
}

// Get holdings for all editions
func (r ApiFindBibHoldingsRequest) HoldingsAllEditions(holdingsAllEditions bool) ApiFindBibHoldingsRequest {
	r.holdingsAllEditions = &holdingsAllEditions
	return r
}

// Get holdings for specific edition across variant records
func (r ApiFindBibHoldingsRequest) HoldingsAllVariantRecords(holdingsAllVariantRecords bool) ApiFindBibHoldingsRequest {
	r.holdingsAllVariantRecords = &holdingsAllVariantRecords
	return r
}

// language user would prefer metadata description in
func (r ApiFindBibHoldingsRequest) PreferredLanguage(preferredLanguage string) ApiFindBibHoldingsRequest {
	r.preferredLanguage = &preferredLanguage
	return r
}

// Restrict to holdings held by institutions in requested country
func (r ApiFindBibHoldingsRequest) HeldInCountry(heldInCountry string) ApiFindBibHoldingsRequest {
	r.heldInCountry = &heldInCountry
	return r
}

// Institution Symbol
func (r ApiFindBibHoldingsRequest) HeldBySymbol(heldBySymbol []string) ApiFindBibHoldingsRequest {
	r.heldBySymbol = &heldBySymbol
	return r
}

// Institution registryId
func (r ApiFindBibHoldingsRequest) HeldByInstitutionID(heldByInstitutionID []int32) ApiFindBibHoldingsRequest {
	r.heldByInstitutionID = &heldByInstitutionID
	return r
}

// latitude
func (r ApiFindBibHoldingsRequest) Lat(lat float64) ApiFindBibHoldingsRequest {
	r.lat = &lat
	return r
}

// longitude
func (r ApiFindBibHoldingsRequest) Lon(lon float64) ApiFindBibHoldingsRequest {
	r.lon = &lon
	return r
}

// distance
func (r ApiFindBibHoldingsRequest) Distance(distance int32) ApiFindBibHoldingsRequest {
	r.distance = &distance
	return r
}

// distance unit
func (r ApiFindBibHoldingsRequest) Unit(unit string) ApiFindBibHoldingsRequest {
	r.unit = &unit
	return r
}

// When a lat/lon is passed, the number of nearest holdings to show even if outside the search radius.
func (r ApiFindBibHoldingsRequest) NumberNearestHoldings(numberNearestHoldings int32) ApiFindBibHoldingsRequest {
	r.numberNearestHoldings = &numberNearestHoldings
	return r
}

// start position of the bib records to return (0 based), default 0
func (r ApiFindBibHoldingsRequest) Offset(offset int32) ApiFindBibHoldingsRequest {
	r.offset = &offset
	return r
}

// maximum number of records to return, maximum 50, default 10
func (r ApiFindBibHoldingsRequest) Limit(limit int32) ApiFindBibHoldingsRequest {
	r.limit = &limit
	return r
}

func (r ApiFindBibHoldingsRequest) Execute() (*FindBibRetainedHoldings200Response, *http.Response, error) {
	return r.ApiService.FindBibHoldingsExecute(r)
}

/*
FindBibHoldings Find member holdings for a known item

Given a known item, find the member libraries who hold it

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFindBibHoldingsRequest
*/
func (a *MemberGeneralHoldingsApiService) FindBibHoldings(ctx context.Context) ApiFindBibHoldingsRequest {
	return ApiFindBibHoldingsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FindBibRetainedHoldings200Response
func (a *MemberGeneralHoldingsApiService) FindBibHoldingsExecute(r ApiFindBibHoldingsRequest) (*FindBibRetainedHoldings200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FindBibRetainedHoldings200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberGeneralHoldingsApiService.FindBibHoldings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bibs-holdings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.oclcNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "oclcNumber", r.oclcNumber, "")
	}
	if r.isbn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isbn", r.isbn, "")
	}
	if r.issn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "issn", r.issn, "")
	}
	if r.holdingsAllEditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "holdingsAllEditions", r.holdingsAllEditions, "")
	}
	if r.holdingsAllVariantRecords != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "holdingsAllVariantRecords", r.holdingsAllVariantRecords, "")
	}
	if r.preferredLanguage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preferredLanguage", r.preferredLanguage, "")
	}
	if r.heldInCountry != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "heldInCountry", r.heldInCountry, "")
	}
	if r.heldBySymbol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "heldBySymbol", r.heldBySymbol, "csv")
	}
	if r.heldByInstitutionID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "heldByInstitutionID", r.heldByInstitutionID, "csv")
	}
	if r.lat != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lat", r.lat, "")
	}
	if r.lon != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lon", r.lon, "")
	}
	if r.distance != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distance", r.distance, "")
	}
	if r.unit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "unit", r.unit, "")
	}
	if r.numberNearestHoldings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "numberNearestHoldings", r.numberNearestHoldings, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accept != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept", r.accept, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFindBibSummaryHoldingsRequest struct {
	ctx                       context.Context
	ApiService                *MemberGeneralHoldingsApiService
	accept                    *string
	oclcNumber                *int64
	isbn                      *string
	issn                      *string
	holdingsAllEditions       *bool
	holdingsAllVariantRecords *bool
	preferredLanguage         *string
	heldInCountry             *string
	heldByGroup               *string
	heldBy                    *string
	heldBySymbol              *[]string
	heldByInstitutionID       *[]int32
	lat                       *float64
	lon                       *float64
	distance                  *int32
	unit                      *string
}

// Content Type the client supports and is requesting (application/json currently supported)
func (r ApiFindBibSummaryHoldingsRequest) Accept(accept string) ApiFindBibSummaryHoldingsRequest {
	r.accept = &accept
	return r
}

// oclc number of the bibliographic item
func (r ApiFindBibSummaryHoldingsRequest) OclcNumber(oclcNumber int64) ApiFindBibSummaryHoldingsRequest {
	r.oclcNumber = &oclcNumber
	return r
}

// isbn of the bibliographic item (bn index)
func (r ApiFindBibSummaryHoldingsRequest) Isbn(isbn string) ApiFindBibSummaryHoldingsRequest {
	r.isbn = &isbn
	return r
}

// issn of the bibliographic item (in index)
func (r ApiFindBibSummaryHoldingsRequest) Issn(issn string) ApiFindBibSummaryHoldingsRequest {
	r.issn = &issn
	return r
}

// Get holdings for all editions
func (r ApiFindBibSummaryHoldingsRequest) HoldingsAllEditions(holdingsAllEditions bool) ApiFindBibSummaryHoldingsRequest {
	r.holdingsAllEditions = &holdingsAllEditions
	return r
}

// Get holdings for specific edition across variant records
func (r ApiFindBibSummaryHoldingsRequest) HoldingsAllVariantRecords(holdingsAllVariantRecords bool) ApiFindBibSummaryHoldingsRequest {
	r.holdingsAllVariantRecords = &holdingsAllVariantRecords
	return r
}

// language user would prefer metadata description in
func (r ApiFindBibSummaryHoldingsRequest) PreferredLanguage(preferredLanguage string) ApiFindBibSummaryHoldingsRequest {
	r.preferredLanguage = &preferredLanguage
	return r
}

// Restrict to holdings held by institutions in requested country
func (r ApiFindBibSummaryHoldingsRequest) HeldInCountry(heldInCountry string) ApiFindBibSummaryHoldingsRequest {
	r.heldInCountry = &heldInCountry
	return r
}

// Restrict to holdings held by Group Symbol
func (r ApiFindBibSummaryHoldingsRequest) HeldByGroup(heldByGroup string) ApiFindBibSummaryHoldingsRequest {
	r.heldByGroup = &heldByGroup
	return r
}

// Institution Symbol
// Deprecated
func (r ApiFindBibSummaryHoldingsRequest) HeldBy(heldBy string) ApiFindBibSummaryHoldingsRequest {
	r.heldBy = &heldBy
	return r
}

// Institution Symbol
func (r ApiFindBibSummaryHoldingsRequest) HeldBySymbol(heldBySymbol []string) ApiFindBibSummaryHoldingsRequest {
	r.heldBySymbol = &heldBySymbol
	return r
}

// Institution registryId
func (r ApiFindBibSummaryHoldingsRequest) HeldByInstitutionID(heldByInstitutionID []int32) ApiFindBibSummaryHoldingsRequest {
	r.heldByInstitutionID = &heldByInstitutionID
	return r
}

// latitude
func (r ApiFindBibSummaryHoldingsRequest) Lat(lat float64) ApiFindBibSummaryHoldingsRequest {
	r.lat = &lat
	return r
}

// longitude
func (r ApiFindBibSummaryHoldingsRequest) Lon(lon float64) ApiFindBibSummaryHoldingsRequest {
	r.lon = &lon
	return r
}

// distance
func (r ApiFindBibSummaryHoldingsRequest) Distance(distance int32) ApiFindBibSummaryHoldingsRequest {
	r.distance = &distance
	return r
}

// distance unit
func (r ApiFindBibSummaryHoldingsRequest) Unit(unit string) ApiFindBibSummaryHoldingsRequest {
	r.unit = &unit
	return r
}

func (r ApiFindBibSummaryHoldingsRequest) Execute() (*FindBibRetainedHoldings200Response, *http.Response, error) {
	return r.ApiService.FindBibSummaryHoldingsExecute(r)
}

/*
FindBibSummaryHoldings Get summary of holdings for a known item

Given a known item, get summary of holdings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFindBibSummaryHoldingsRequest
*/
func (a *MemberGeneralHoldingsApiService) FindBibSummaryHoldings(ctx context.Context) ApiFindBibSummaryHoldingsRequest {
	return ApiFindBibSummaryHoldingsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FindBibRetainedHoldings200Response
func (a *MemberGeneralHoldingsApiService) FindBibSummaryHoldingsExecute(r ApiFindBibSummaryHoldingsRequest) (*FindBibRetainedHoldings200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FindBibRetainedHoldings200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberGeneralHoldingsApiService.FindBibSummaryHoldings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bibs-summary-holdings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.oclcNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "oclcNumber", r.oclcNumber, "")
	}
	if r.isbn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isbn", r.isbn, "")
	}
	if r.issn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "issn", r.issn, "")
	}
	if r.holdingsAllEditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "holdingsAllEditions", r.holdingsAllEditions, "")
	}
	if r.holdingsAllVariantRecords != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "holdingsAllVariantRecords", r.holdingsAllVariantRecords, "")
	}
	if r.preferredLanguage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preferredLanguage", r.preferredLanguage, "")
	}
	if r.heldInCountry != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "heldInCountry", r.heldInCountry, "")
	}
	if r.heldByGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "heldByGroup", r.heldByGroup, "")
	}
	if r.heldBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "heldBy", r.heldBy, "")
	}
	if r.heldBySymbol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "heldBySymbol", r.heldBySymbol, "csv")
	}
	if r.heldByInstitutionID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "heldByInstitutionID", r.heldByInstitutionID, "csv")
	}
	if r.lat != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lat", r.lat, "")
	}
	if r.lon != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lon", r.lon, "")
	}
	if r.distance != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distance", r.distance, "")
	}
	if r.unit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "unit", r.unit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accept != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept", r.accept, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v FindBibRetainedHoldings400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
