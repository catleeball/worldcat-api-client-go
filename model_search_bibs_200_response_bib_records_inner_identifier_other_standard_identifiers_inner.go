/*
WorldCat Search API v. 2

Searching of WorldCat

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner{}

// SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner struct for SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner
type SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner struct {
	Type *string `json:"type,omitempty"`
	Id   *string `json:"id,omitempty"`
}

// NewSearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner instantiates a new SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner() *SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner {
	this := SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner{}
	return &this
}

// NewSearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInnerWithDefaults instantiates a new SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInnerWithDefaults() *SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner {
	this := SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner) SetId(v string) {
	o.Id = &v
}

func (o SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

type NullableSearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner struct {
	value *SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner
	isSet bool
}

func (v NullableSearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner) Get() *SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner {
	return v.value
}

func (v *NullableSearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner) Set(val *SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner(val *SearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner) *NullableSearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner {
	return &NullableSearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner{value: val, isSet: true}
}

func (v NullableSearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchBibs200ResponseBibRecordsInnerIdentifierOtherStandardIdentifiersInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
